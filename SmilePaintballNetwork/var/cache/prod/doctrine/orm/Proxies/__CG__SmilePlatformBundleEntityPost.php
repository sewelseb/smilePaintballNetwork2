<?php

namespace Proxies\__CG__\Smile\PlatformBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \Smile\PlatformBundle\Entity\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'user', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'title', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'upvotes', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'downvotes', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'comments', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'eventName', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'creationTime', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'picture', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'url', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'type', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'nullable'];
        }

        return ['__isInitialized__', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'user', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'title', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'upvotes', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'downvotes', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'comments', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'eventName', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'creationTime', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'picture', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'url', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'type', '' . "\0" . 'Smile\\PlatformBundle\\Entity\\Post' . "\0" . 'nullable'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpvotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpvotes', []);

        return parent::getUpvotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpvotes($upvotes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpvotes', [$upvotes]);

        return parent::setUpvotes($upvotes);
    }

    /**
     * {@inheritDoc}
     */
    public function getDownvotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDownvotes', []);

        return parent::getDownvotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setDownvotes($downvotes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDownvotes', [$downvotes]);

        return parent::setDownvotes($downvotes);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventName', []);

        return parent::getEventName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventName($eventName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventName', [$eventName]);

        return parent::setEventName($eventName);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationTime', []);

        return parent::getCreationTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationTime($creationTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationTime', [$creationTime]);

        return parent::setCreationTime($creationTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getPicture()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPicture', []);

        return parent::getPicture();
    }

    /**
     * {@inheritDoc}
     */
    public function setPicture($picture)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPicture', [$picture]);

        return parent::setPicture($picture);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getNullable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNullable', []);

        return parent::getNullable();
    }

    /**
     * {@inheritDoc}
     */
    public function setNullable($nullable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNullable', [$nullable]);

        return parent::setNullable($nullable);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments($comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', [$comments]);

        return parent::setComments($comments);
    }

}
